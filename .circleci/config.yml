version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            echo "destroy work flow"

  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            echo "$SUCCESS"
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
#  destroy-environment:
#    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#    parameters:
#      workflow_id:
#        type: string
#    steps:
#      - run:
#          name: Destroy environment
#          when: on_fail
#          command: |
#            echo "Destroying environment: << parameters.workflow_id >> "
#
#  revert-migrations:
#    description: Revert the last migration if successfully run in the current workflow.
#    parameters:
#      workflow_id:
#        type: string
#    steps:
#      - run:
#          name: Revert migrations
#          when: on_fail
#          command: |
#            # Your Memstash or kvdb.io GET URL code goes here
#            # Example: Memstash.io
#            SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
#            # Example: kvdb.io
#            SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)
#            # Logic for reverting the database state
#            if (( $SUCCESS == 1 ));
#            then
#                cd ~/project/backend
#                npm install
#                npm run migration:revert
#            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan front-end dependencies
          command: |
            cd frontend
            npm install
#            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: scan back-end dependencies
          command: |
            cd backend
            npm install
#            npm audit --audit-level=critical

  deploy-infrastructure:
     docker:
       - image: amazon/aws-cli
     steps:
       - checkout
#       - run:
#           name: Ensure back-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/backend.yml \
#             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#             --tags project=udapeople
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#             --template-file .circleci/files/frontend.yml \
#             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
#             --tags project=udapeople
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt


  configure-infrastructure:
    docker:
      - image: python:3.11.0rc1-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["27:6f:ff:4a:6e:a7:96:df:bd:21:d4:07:60:ed:06:2e"]
      - run:
          name: "Install Dependencies"
          command: |
            apk add ansible gzip openssh-client
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations

  deploy-frontend:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Deploy Frontend
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
             echo "API_URL=http://$BACKEND_PUBLIC_IP:3030"
            # Build the frontend
            cd frontend
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            npm install
            npm run build:prod
            # aws s3 sync dist s3://udapeople-project
            aws s3 cp dist s3://udapeople-297de3e --recursive

  deploy-backend:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["27:6f:ff:4a:6e:a7:96:df:bd:21:d4:07:60:ed:06:2e"]
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt
            cd backend
            npm i
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ../.circleci/ansible/roles/deploy/
            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    docker:
      - image: mareimorsy/aws-node
       # Lightweight Docker image
    steps:
      - checkout
#       # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
#             # your code here
#      - run:
#          name: Get backend url
#          command: |
#             # your code here
#      - run:
#          name: Backend smoke test.
#          command: |
#            export API_URL="http://${BACKEND_IP}:3030"
#            echo "${API_URL}"
#            if curl "${API_URL}/api/status" | grep "ok"
#            then
#                return 0
#            else
#                return 1
#            fi
      - run:
          name: backend smoke test.
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)

            # URL="http://$BACKEND_PUBLIC_IP:3030/api/status"
            URL="http://g00gle.com"
            if curl -s --head ${URL}
            then
              echo "It worked!"
              exit 0
            else
              echo "Rolling Back"
              exit 1
            fi
#      - run:
#          name: Frontend smoke test.
#          command: |
#            URL="http://udapeople-297de3e.s3-website-us-east-1.amazonaws.com/#/employees"
#              echo ${URL}
#              if curl -s ${URL} | grep "Welcome"
#              then
#                  # Change this to 0 after the job fails
#                return 1
#              else
#                return 1
#              fi
      - destroy-environment
      - revert-migrations
       # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
#      - run:
#          name: Save Old Workflow ID to kvdb.io
#          command: |
#            export OLD_WORKFLOW_ID=$(aws cloudformation \
#                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#                      --no-paginate --output text)
#            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
#            curl -k https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi


workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - deploy-infrastructure:
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
      - deploy-backend
#          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      #- smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
